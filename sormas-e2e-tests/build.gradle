import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

plugins {
	id 'com.github.sherter.google-java-format' version '0.9'
	id "com.diffplug.spotless" version "5.12.4"
}

apply plugin: 'java'

repositories {
	mavenCentral()
}

dependencies {
	implementation("io.qameta.allure:allure-cucumber4-jvm:$allureCucumber4JvmVersion")
	testImplementation("io.qameta.allure:allure-java-commons:$allureJavaCommonsVersion")
	testImplementation("io.qameta.allure:allure-rest-assured:$allureRestAssureVersion")
	testImplementation("ru.yandex.qatools.allure:allure-java-adaptor-api:$allureVersion")

	implementation("io.github.prashant-ramcharan:courgette-jvm:$ioGithubPrashantRamcharan") {
		exclude group: 'org.testng', module: 'testng'
		exclude group: 'org.yaml', module: 'testng'
	}
	implementation("io.github.bonigarcia:webdrivermanager:$webdrivermanager")
	implementation("org.seleniumhq.selenium:selenium-java:$seleniumhqVersion") {
		exclude group: 'com.google.guava', module: 'guava'
	}
	implementation("org.awaitility:awaitility:$orgAwaitility")
	testImplementation("org.awaitility:awaitility:$orgAwaitility")

	testImplementation("com.google.truth.extensions:truth-java8-extension:$truthVersion") {
		exclude group: 'com.google.guava', module: 'guava'
	}
	implementation("com.google.truth.extensions:truth-java8-extension:$truthVersion") {
		exclude group: 'com.google.guava', module: 'guava'
	}

	implementation("org.projectlombok:lombok:$lombokVersion")
	annotationProcessor("org.projectlombok:lombok:$lombokVersion")
	testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")

	implementation("com.google.guava:guava:$guavaVersion")

	implementation("com.google.inject:guice:$guiceVersion")
	implementation("io.cucumber:cucumber-guice:$cucumberVersion")

	implementation("org.slf4j:slf4j-api:$orgSlf4J")
	implementation("org.slf4j:slf4j-log4j12:$orgSlf4J")

	implementation("ch.qos.logback:logback-classic:$logBackVersion")
	implementation("ch.qos.logback:logback-core:$logBackVersion")

	implementation("com.github.javafaker:javafaker:$javaFakerVersion") { exclude module: 'org.yaml' }

	testImplementation group: 'org.assertj', name: 'assertj-core', version: assertjCore

	implementation("io.rest-assured:rest-assured:$restAssured")
	implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonDatatypeJdk8")
	implementation("com.fasterxml.jackson.core:jackson-core:$jacksonDatatypeJdk8")
	implementation group: 'org.assertj', name: 'assertj-core', version: assertjCore
}

task format(type: GoogleJavaFormat) {
	source 'src/main'
	source 'src/test'
	include '**/*.java'
}

tasks.withType(Test) {
	maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
	systemProperties = System.getProperties()
	systemProperties.remove("java.endorsed.dirs") // needs to be removed from Java 9
}

task createReportFolderIfNotExist() {
	// Create a File object representing the folder 'A/B'
	def folder = new File('allureReports')
	println("[GRADLE-INFO] : Checking if allureReports folder exists")
	println file("allureReports").isDirectory()

	// If it doesn't exist
	if (!folder.exists()) {
		// Create all folders up-to and including B
		folder.mkdirs()
		println("[GRADLE-INFO] : allureReports folder was created !")
		println file("allureReports").isDirectory()
	}
}

tasks.register('startTests') {
	doLast {
		println 'Starting the test cases'
	}
}

task copyGeneratedReport(type: Copy) {
	dependsOn 'createReportFolderIfNotExist'

	from file("$buildDir/reports/allure-report")
	into file("allureReports")
	// print info
	println("[GRADLE-INFO] : Moving files from allure-report to allureReports folder")
	println file("allureReports").listFiles()
}

task copyToGeneratedReport(type: Copy) {
	from file("allureReports/history")
	into file("$buildDir/allure-results/history")
}

task copyCategoriesJson(type: Copy) {
	from file("src/test/resources/allurefiles/categories.json")
	into file("$buildDir/allure-results")
	// print info
	println("[GRADLE-INFO] : Listing all files from allure-results folder after copying jsons from categories.json")
	println file("$buildDir/allure-results").listFiles()
}
task copyEnvironmentProperties(type: Copy) {
	dependsOn 'copyCategoriesJson'

	from file("$buildDir/resources/test/allurefiles/environment.properties")
	into file("$buildDir/allure-results")
	// print info
	println("[GRADLE-INFO] : Listing all files from allure-results folder after copying jsons from environment.properties ")
	println file("$buildDir/allure-results").listFiles()
}

task createAllureReport(type: Exec) {
	workingDir System.getProperty("user.dir")
	def workingDirectory = System.getProperty("user.dir")
	println("[GRADLE-INFO] : Current working directory is: " + workingDirectory)
	def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')
	if (isWindows) {
		commandLine 'cmd', '/c', 'allure.bat', 'generate', "${workingDirectory}/build/allure-results", '-c', '-o', "${workingDirectory}/allureReports"
	} else {
		println("[GRADLE-INFO] : Running command to generate allure reports")

		def filesFromAllureResultsBeforeGeneration = file("${workingDirectory}/build/allure-results").listFiles().length
		println ("[GRADLE-INFO] : " + filesFromAllureResultsBeforeGeneration + " files in allure-results folder")

		def filesFromAllureReportsBeforeGeneration = file("${workingDirectory}/allureReports").listFiles().length
		println ("[GRADLE-INFO] : " + filesFromAllureReportsBeforeGeneration + " files in allureReports folder")

		commandLine "allure", 'generate', "${workingDirectory}/build/allure-results", '-c', '-o', "${workingDirectory}/allureReports"

		def filesFromAllureReportsAfterGeneration = file("${workingDirectory}/allureReports").listFiles().length
		println ("[GRADLE-INFO] : " + filesFromAllureReportsAfterGeneration + " files in allureReports folder")
	}
}

test {
	maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
	println("maxParallelForks : " + maxParallelForks)
	testLogging.showStandardStreams = true

	// Pass all properties
	systemProperties = System.getProperties() as Map<String, ?>
	systemProperties.remove("java.endorsed.dirs")
}

compileJava.dependsOn format
println ("[GRADLE-INFO] : format task executed with success")
startTests.finalizedBy copyToGeneratedReport
copyToGeneratedReport.finalizedBy test
test.finalizedBy copyEnvironmentProperties
copyEnvironmentProperties.finalizedBy createAllureReport
createAllureReport.finalizedBy copyGeneratedReport
println ("[GRADLE-INFO] : Create allure report task executed with success")